Intro to PERL:
`````````````````
=> Its very powerful & adaptable language. Developed by Larry Wall for NASA in 1987.
=> PERL is "Practical Extraction and Report Language"
=> Perl is case-sensitive
=> In PERL every line ends with ; (semicolon).
=> Perl used in many fields like 
- application development, 
- test automation, 
- website development, 
- XML manipulation, 
- configuration management, 
- CGI programming, 
- Bioinformatics, 
- system administration, 
- game development, 
- databases, 
- GUI development, 
- desktop apps and many more.

=> PERL uses the Perl DBI its standard database interface. It fully supports third-party databases integration of Oracle, Postgres, MySQL and others.

=> Perl is compatible with HTML, XML and other markup languages.

=> Perl supports procedural programming such as sed, awk etc

=> There is no requirement of specifying data type in PERL.

=> It has three type - Scalar, Array, Hashes.

Installation:
``````````````
Manual:
`
Download: https://www.perl.org/get.html

Automated:
`
# apt search perl | grep "^perl"
# apt info perl
# apt install perl -y




# perl -v [ To check version ]












PERL in command mode:
````[.pl]
=> The following arguments can be used while executing a Perl program.

# perl -<argument> script.pl

w – argument shows a warning.
d – used for debugging.
c – compiles only do not run.
e – execute.



# perl -e 'print "Ulalalalala\n"'

[ -e : execute ]

# perl -E 'say "Ulalalalala"'

[ -E : Enable Adv features ]
[ say : Auto add \n ]




Via stdin:
`
# echo 'print "Ulalalalala\n"' | perl -
# echo 'print "Ulalalalala\n"' | perl

Interective console:
`````
# perl
print "LOL\n";
^D
LOL

++++++++++++++++++++++++++++++++++++++++++++++++++++++++
First line of PERL:
````[ .pl OR .PL ]
SHEBANG : #!
ENV : /usr/bin/perl

# vim first.pl

#!/usr/bin/perl
print "Hello CDAC\n";

# perl first.pl
OR
# chmod u+x first.pl
# ./first.pl

Compile Only:
`
# perl -c script.pl
script.pl syntax OK

Debug:
```
# perl -d script.pl
main::(1.pl:2):	print "Ulalalalalala\n";
DB<1> n [ To execute & go to next line of code ]
DB<1> h [ help ]
DB<1> q [ quit ]







+++++++++++++++++++++++++++++++++++++++++++++++++


Variables:
`
=> Variables are case-sensitive in PERL
=> There are three types of variables in PERL:

- Scalar
- Array
- Hashes


Scalar:
`
=> Perl automatically identify whether is it int or string or float or a char or a paragraph or an entire web page, and both are scalar values for perl.

=> To declare multiple variables at once : $var1, $var2, $var3
=> Perl has a special "undefined" value, written as "undef"
=> Declared but not assigned variables have the value undef
=> If you want to return string without interpolation, you need to use '' [Single Quotes]
eg: print 'Data $100';
NOTE: it will print $100 as it is.


=> Default scalar have initial value as 0
=> NOTE: There is no boolean type in Perl, Instead perl has a notion of truth or falsity/falseness of any scalar[Only as a single variable]***

eg: [Only as a single variable]***

- 0 [ZERO] is a number itself is FALSE
- An empty string '' (with single quotes) and the string '0' are false
- undef itself is false.
- ANYTHING ELSE is TRUE.

#!/usr/bin/perl
$test = undef; # now $test var is undefined
$a	= '';
$b = '0';
$c;
print "$test\n";
print "$a\n";
print "$b\n";
print "$c\n";






=> Float point values include the spacial values "inf" [infinity] and "NaN" [not a Number]. [Only as a single variable]***







=> Every scalar must begin with $ like:
``````
$variable1 = "natasha";  	# String
$variable2 = 99;						# int
$variable3 = 1.19;					# Float
 
----------------------




# vim script.pl

#!/usr/bin/perl

$variable1 = "natasha";  # String
$variable2 = 99;			# int
$variable3 = 1.19;		# Float

print "OUT1 = $variable1\n";
print "OUT2 = $variable2\n";
print "OUT3 = $variable3\n";

# perl script.pl

OUT1 = natasha
OUT2 = 99
OUT3 = 1.19
+++++++++++++++++++++++++++++++++++++++
Arithmetic ops:
````
$a = 2;
$b = 3;
print $a + $b;
print $a - $b;
print $a / $b;
print $a * $b;
print $a ** $b;
print $a % $b;

OR

#!/usr/bin/perl
$a = 2;
$b = 3;
print ($a + $b, "\n");
print ($a - $b, "\n");
print ($a / $b, "\n");
print ($a * $b, "\n");
print ($a % $b, "\n");






+++++++++++++++++++++++++++++++++++++++
OS Command Call:
``
#!/usr/bin/perl
$a = `pwd`;
print $a;
-----------------
OS Command output with exit status:
`````
#!/usr/bin/perl
$a = system("pwd");
print "$a\n";
-------------------------------------
User input in Perl:
````
- Perl use <> operator
- this operator reads a line along with the newline (\n) char.

#!/usr/bin/perl
print "Enter target: ";
$a = <>;
print "Target is : $a"

# perl script.pl
Enter target: NASA
NASA\n

NOTE: One more thing you should notice here is that <> also returned a newline character corresponding to the ENTER we pressed after giving input.

Perl chomp():
````
- We can use 'chomp' function. It just removes the newline character from the end.

#!/usr/bin/perl
print "Enter target: ";
$a = <>;
chomp($a);
print "Target is : $a"

# perl script.pl
Enter target: NASA
NASA

Perl chop():
```
The Perl chop() function removes last character from a string regardless of what that character is.

#!/usr/bin/perl
$a = "abc;
chop($a);
print "$a\n"

# perl script.pl
ab




# perl 1.pl

Enter command: pwd
OUTPUT: /root

#!/usr/bin/perl
print "Enter commnad: ";
$a = <>;														
chomp($a)
print ("Output: ", `$a`);







______________________


Some adv features in PERL:
````` 

=> use of Pragmas:
````
* Its highly recommanded to use pragmas in top of the program. This force you to declare all your variables and causes PERL to complain/warning when it sees a variable which is not declared or misspelled.

* It also checks the variable scopes in different blocks of a long code.

use strict;
use warnings;
 

EG:

#!/usr/bin/perl
print "$test\n";

# perl script.pl

----------------------
WITH WARNING PRAGMA:
----------------------

#!/usr/bin/perl
use warnings;
print "$test\n";

# perl script.pl
Name "main::test" used only once: possible typo at script.pl line 3.
Use of uninitialized value $test in concatenation (.) or string at script.pl line 3.

----------------------
WITH STRICT PRAGMA:
----------------------

#!/usr/bin/perl
use strict;
print "$test\n";

# perl script.pl
Global symbol "$test" requires explicit package name (did you forget to declare "my $test"?) at script.pl line 4.
Execution of script.pl aborted due to compilation errors.

-------------------------------
BOTH STRICT & WARNINGS PRAGAMA:
-------------------------------
#!/usr/bin/perl
use strict;
use warnings;
print "$test\n";

# perl script.pl
Global symbol "$test" requires explicit package name (did you forget to declare "my $test"?) at script.pl line 4.
Execution of script.pl aborted due to compilation errors.

_______________________________________
my - Local variable
``
- Suppose we have a variable having some value but we want to use a different value of the same variable only in one block of code.

#!/usr/bin/perl
use strict;
use warnings;

$a = 5;
print "Value: $a\n";
{
 $a = 6;
  print "Value of a is $a\n";
}
print "Value of a outside the block is $a\n";

# perl script.pl
Value: 5
Value of a is 6
Value of a outside the block is 6
-------------------------
#!/usr/bin/perl
use strict;
use warnings;

$a = 5;
print "Value: $a\n";
{
 my $a = 6;
  print "Value of a is $a\n";
}
print "Value of a outside the block is $a\n";

# perl script.pl
Value: 5
Value of a is 6
Value of a outside the block is 5

_______________________________________
Array:

=> In array we will access the values using the index.
=> Array variables must begin with @ like

@array1 = ("natasha", "dheeraj", 1.222, 22);
@array2 = (10,20,30);

To print :
``
#!/usr/bin/perl
use strict;
use warnings;

my @array1 = ("natasha", "dheeraj", 1.222, 22);
my @array2 = (10,20,30);

print "OUT1: $array1[0]\n";
print "OUT2: $array2[0]\n";

# perl script.pl

OUT1: natasha
OUT2: 10


Hashes:
`
=> Hashes are key:value pair
=> In hash we will access the values using the key.
=> Hash variable must begin with % like

my %hash1 = ('key1', kids, "lol", "pop");
my %hash1 = (key1 => kids, lol => psh);
my %hash1 = (
	key1 => value1,
	key2 => value2,
);

Print them:
``

Without Pragmas:
````
# vim script.pl

#!/usr/bin/perl

%hash1 = (key1, kids, lol, psh);
print "$hash1{'key1'}\n";
print "$hash1{'lol'}\n";


# perl script.pl
kids
psh


With Pragmas:
``
#!/usr/bin/perl
use strict;
use warnings;

my %hash1 = (
'key1' => 'kids', 
'lol' => 'psh'
);
print keys %hash1;
print values %hash1;
print %hash1;
print "$hash1{'key1'}\n";
print "$hash1{'lol'}\n";


# perl script.pl
kids
psh

Q. GO TO QUE

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

String Ops in PERL:
````
=> You can concatenate, increment, decrement, repeat etc to the strings.

my $string1 = "Dheeraj";
my $string2 = "Natasha";

Concatenate:
````
print "$strint1" . "$string2\n";

OR

my $new = $strint1 . $string2;
print "$new\n";


Multiply String:
````
#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "xyz";
print ($string1 * 5);

# perl script.pl
0

=> Result is ZERO because multiply operator treats string as 0 by default after parsing. You need int to multiply.


=> Now suppose we have:

#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "12xy32";
print ($string1 * 2);

# perl script.pl
24

=> Result 24 because "12" is int but after that is see "xy" (a string value) so it will not parse further.

With Pragmas:
``

#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "xyz";
print ($string1 * 5);

# perl script.pl
Argument "xyz" isn't numeric in multiplication (*) at script.pl line 6.



Repeat Ops:
``
#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "ab";
print "$string1\n" x 2;

# perl script.pl
ab
ab

Increament Ops:
````
#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "ab";
$string1++;
print "$string1\n";

=> Last char increamented by one.
# perl script.pl
ac


Reverse:
``

=> reverse() function in Perl when used in a list context
=> For string you need to provide "scalar"

#!/usr/bin/perl
use strict;
use warnings;

my $string1 = "ab";
my @arr1 = (10, 20 ,30);

print reverse(@arr1);
print scalar reverse($string1);


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


NOTE: All the perl's data types (scalar, array & hash) can provide a list, which is simply as ordered/unordered set of scalars.

eg

my $string = "LOL";
my @array = (1,2,3);
my %hash = ('key' => 'value');

LISTs/Arrays in PERL:
``
=> Lists are collection of scalars


Declare a list:
```
my @list = (a,b,c,d); 

Accessing a list element:
`````
my $element = $list[2];

Accessing last element:
`````
my $element = $list[-1];


Slicing:
``
You can copy the elements from one list/array to other list/array:

#!/usr/bin/perl
use strict;
use warnings;

my @array1 = ("a","b","c","d");
my @nw = @array1[1,3];

print "$nw[0]\n";
print "$nw[1]\n";

# perl script.pl

Range:
```
#!/usr/bin/perl
use strict;
use warnings;

my @list1 = (1..20);
print(@list1);
print(@list1, "\n");

OR

print(5, 10..15, 20, "\n");

NOTE: print() works different with ""
``
print(@list1)
print("@list1")


UC & LC & LENGTH:
```
#!/usr/bin/perl
use strict;
use warnings;

my $a = "Natasha";
print lc "$a\n";
print uc "$a\n";
print length $a;

# perl script.pl
natasha
NATASHA
7

INDEX:


=> This function will get two strings and return the location of the second string within the first string.

#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";

print index $a, "s";

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_


SUBSTR:
`

=> It is basically the opposite of index(). While index() will tell you where is a given string, substr will give you the substring at a given locations.

=> This fuction required 3 parameters: 
	+ The first one is the string
	+ The second is a 0-based location
	+ the third is the length of the substring


# vim script.pl 

#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";

print substr $a, 2, 2;

# perl script.pl
is

++++++++++++++++++++++++++++++++++++++
=> Count 2 from the left, 11 from the right, return what is between.
`````````
# vim script.pl 

#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";

print substr $a, 2, -11;

# perl script.pl
i

 
++++++++++++++++++++++++++++++++++++++++++++++++
=> You can also leave out the 3rd (length) parameter which will mean: return all the characters
``````````

# vim script.pl 

#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";
print substr $a, 1;

# perl script.pl
his is sparta
++++++++++++++++++++++++++++++++++++++++++++++++++

=> We can also use a negative number in the offset, which will mean: count 2 from the right


# vim script.pl 

#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";
print substr $a, -2;

# perl script.pl
ta

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Replacing part of a string
```
#!/usr/bin/perl
use strict;
use warnings;

my $a = "This is sparta";

substr $a, -6, 6, "BABA";
print "$a\n"



_____________________________________________________________

SWAP Variables:
``````
#!/usr/bin/perl
use strict;
use warnings;

my $a = "a";
my $b = "b";
($a, $b) = ($b, $a);
print "\$a = $a\n";
print "\$b = $b\n";

# perl script.pl
$a = b
$b = a
____________________________